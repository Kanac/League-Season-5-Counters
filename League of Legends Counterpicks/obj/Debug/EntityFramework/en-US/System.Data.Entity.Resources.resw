<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DbContext_MESTNotSupported" xml:space="preserve">
    <value>The DbContext class cannot be used with models that have multiple entity sets per type (MEST).</value>
  </data>
  <data name="DbContext_ProviderNameMissing" xml:space="preserve">
    <value>The connection string '{0}' in the application's configuration file does not contain the required providerName attribute."</value>
  </data>
  <data name="UnintentionalCodeFirstException_Message" xml:space="preserve">
    <value>Code generated using the T4 templates for Database First and Model First development may not work correctly if used in Code First mode. To continue using Database First or Model First ensure that the Entity Framework connection string is specified in the config file of executing application. To use these classes, that were generated from Database First or Model First, with Code First add any additional configuration using attributes or the DbModelBuilder API and then remove the code that throws this exception.</value>
  </data>
  <data name="DbEntityValidationException_ValidationFailed" xml:space="preserve">
    <value>Validation failed for one or more entities. See 'EntityValidationErrors' property for more details.</value>
  </data>
  <data name="EdmxWriter_EdmxFromObjectContextNotSupported" xml:space="preserve">
    <value>Creating a DbModelBuilder or writing the EDMX from a DbContext created using an existing ObjectContext is not supported. EDMX can only be obtained from a Code First DbContext created without using an existing DbCompiledModel.</value>
  </data>
  <data name="DbSet_BadTypeForCreate" xml:space="preserve">
    <value>Cannot call the Create method for the type '{0}' on a DbSet for entities of type '{1}'. Only entities of type '{1}' or derived from type '{1}' can be created.</value>
  </data>
  <data name="DbSet_WrongEntityTypeFound" xml:space="preserve">
    <value>The entity found was of type {0} when an entity of type {1} was requested.</value>
  </data>
  <data name="DbEntityEntry_NotAComplexProperty" xml:space="preserve">
    <value>The property '{0}' on type '{1}' is not a complex property. The ComplexProperty method can only be used with complex properties. Use the Property, Reference or Collection method.</value>
  </data>
  <data name="DbEntityEntry_DottedPathMustBeProperty" xml:space="preserve">
    <value>"The property path '{0}' cannot be used for navigation properties. Property paths can only be used to access primitive or complex properties."</value>
  </data>
  <data name="DbPropertyValues_WrongTypeForAssignment" xml:space="preserve">
    <value>Cannot assign value of type '{0}' to property '{1}' of type '{2}' in property values for type '{3}'.</value>
  </data>
  <data name="Database_BadInitializerEntry" xml:space="preserve">
    <value>The DbContextDatabaseInitializer entry 'key="{0}" value="{1}"' in the application configuration is not valid. Entries should be of the form 'key="DatabaseInitializerForType MyNamespace.MyDbContextClass, MyAssembly" value="MyNamespace.MyInitializerClass, MyAssembly"' or 'key="DatabaseInitializerForType MyNamespace.MyDbContextClass, MyAssembly" value="Disabled"'.</value>
  </data>
  <data name="DbPropertyEntry_NotSupportedForDetached" xml:space="preserve">
    <value>Member '{0}' cannot be called for property '{1}' because the entity of type '{2}' does not exist in the context. To add an entity to the context call the Add or Attach method of DbSet&lt;{2}&gt;.</value>
  </data>
  <data name="DbPropertyValues_CannotGetStoreValuesWhenComplexPropertyIsNull" xml:space="preserve">
    <value>The property '{0}' in the entity of type '{1}' is null. Store values cannot be obtained for an entity with a null complex property.</value>
  </data>
  <data name="DbCollectionEntry_CannotSetCollectionProp" xml:space="preserve">
    <value>The collection navigation property '{0}' on the entity of type '{1}' cannot be set because the entity type does not define a navigation property with a set accessor.</value>
  </data>
  <data name="Database_FailedToResolveType" xml:space="preserve">
    <value>The type '{0}' could not be found. The type name must be an assembly-qualified name.</value>
  </data>
  <data name="Database_InitializationException" xml:space="preserve">
    <value>An exception occurred while initializing the database. See the InnerException for details.</value>
  </data>
  <data name="DbEntityEntry_UsedReferenceForCollectionProp" xml:space="preserve">
    <value>The property '{0}' on type '{1}' is a collection navigation property. The Collection method should be used instead of the Reference method.</value>
  </data>
  <data name="Database_InitializeFromConfigFailed" xml:space="preserve">
    <value>Failed to set database initializer of type '{0}' for DbContext type '{1}' specified in the application configuration. Entries should be of the form 'key="DatabaseInitializerForType MyNamespace.MyDbContextClass, MyAssembly" value="MyNamespace.MyInitializerClass, MyAssembly"' or 'key="DatabaseInitializerForType MyNamespace.MyDbContextClass, MyAssembly" value="Disabled"'. The initializer class must have a parameterless constructor. See inner exception for details.</value>
  </data>
  <data name="DbPropertyValues_NestedPropertyValuesNull" xml:space="preserve">
    <value>The value of the nested property values property '{0}' on the values for entity of type '{1}' is null. Nested property values cannot be set to null and values cannot be set for null complex properties.</value>
  </data>
  <data name="DbSet_MultipleAddedEntitiesFound" xml:space="preserve">
    <value>Multiple entities were found in the Added state that match the given primary key values.</value>
  </data>
  <data name="DbEntityEntry_WrongGenericForCollectionNavProp" xml:space="preserve">
    <value>The generic type argument '{0}' cannot be used with the Member method when accessing the collection navigation property '{1}' on entity type '{2}'. The generic type argument '{3}' must be used instead.</value>
  </data>
  <data name="DbPropertyEntry_CannotGetCurrentValue" xml:space="preserve">
    <value>Cannot get value for property '{0}' from entity of type '{1}' because the property has no get accessor.</value>
  </data>
  <data name="DbSet_WrongKeyValueType" xml:space="preserve">
    <value>The type of one of the primary key values did not match the type defined in the entity. See inner exception for details.</value>
  </data>
  <data name="DbSet_DbSetUsedWithComplexType" xml:space="preserve">
    <value>The type '{0}' is mapped as a complex type. The Set method, DbSet objects, and DbEntityEntry objects can only be used with entity types, not complex types.</value>
  </data>
  <data name="DbEntityEntry_DottedPartNotComplex" xml:space="preserve">
    <value>"The property '{0}' from the property path '{1}' is not a complex property on type '{2}'. Property paths must be composed of complex properties for all except the final property."</value>
  </data>
  <data name="SqlConnectionFactory_MdfNotSupported" xml:space="preserve">
    <value>The database name '{0}' is not supported because it is an MDF file name. A full connection string must be provided to attach an MDF file.</value>
  </data>
  <data name="Database_NoDatabaseHash" xml:space="preserve">
    <value>Model compatibility cannot be checked because the database does not contain model metadata. Ensure that IncludeMetadataConvention has been added to the DbModelBuilder conventions.</value>
  </data>
  <data name="DbMember_BadTypeForCast" xml:space="preserve">
    <value>Cannot create a {0}&lt;{1}, {2}&gt; from a non-generic {0} for entities of type '{3}' with property of type '{4}'.</value>
  </data>
  <data name="DbPropertyValues_CannotGetValuesForState" xml:space="preserve">
    <value>{0} cannot be used for entities in the {1} state.</value>
  </data>
  <data name="DbEntityEntry_WrongGenericForProp" xml:space="preserve">
    <value>The property '{0}' on entity type '{1}' cannot be used for objects of type '{2}' because it is a property for objects of type '{3}'.</value>
  </data>
  <data name="DbPropertyValues_AttemptToSetNonValuesOnComplexProperty" xml:space="preserve">
    <value>A property of a complex type must be set to an instance of the generic or non-generic DbPropertyValues class for that type.</value>
  </data>
  <data name="DbExtensions_InvalidIncludePathExpression" xml:space="preserve">
    <value>The Include path expression must refer to a navigation property defined on the type. Use dotted paths for reference navigation properties and the Select operator for collection navigation properties.</value>
  </data>
  <data name="DbQuery_BindingToDbQueryNotSupported" xml:space="preserve">
    <value>Data binding directly to a store query (DbSet, DbQuery, DbSqlQuery) is not supported. Instead populate a DbSet with data, for example by calling Load on the DbSet, and then bind to local data. For WPF bind to DbSet.Local. For WinForms bind to DbSet.Local.ToBindingList().</value>
  </data>
  <data name="Database_MetadataNotMapped" xml:space="preserve">
    <value>Model compatibility cannot be checked because the EdmMetadata type was not included in the model. Ensure that IncludeMetadataConvention has been added to the DbModelBuilder conventions.</value>
  </data>
  <data name="DbUnexpectedValidationException_IValidatableObject" xml:space="preserve">
    <value>An unexpected exception was thrown during validation of '{0}' when invoking {1}.Validate. See the inner exception for details.</value>
  </data>
  <data name="DbSet_EntityTypeNotInModel" xml:space="preserve">
    <value>The entity type {0} is not part of the model for the current context.</value>
  </data>
  <data name="DbEntityEntry_NotAProperty" xml:space="preserve">
    <value>The property '{0}' on type '{1}' is not a primitive property, complex property, collection navigation property, or reference navigation property.</value>
  </data>
  <data name="DbContext_ConnectionHasModel" xml:space="preserve">
    <value>Cannot initialize a DbContext from an entity connection string or an EntityConnection instance together with a DbCompiledModel. If an entity connection string or EntityConnection instance is used, then the model will be created from the metadata in the connection. If a DbCompiledModel is used, then the connection supplied should be a standard database connection (for example, a SqlConnection instance) rather than an entity connection.</value>
  </data>
  <data name="DbSet_PocoAndNonPocoMixedInSameAssembly" xml:space="preserve">
    <value>The type '{0}' is not attributed with EdmEntityTypeAttribute but is contained in an assembly attributed with EdmSchemaAttribute. POCO entities that do not use EdmEntityTypeAttribute cannot be contained in the same assembly as non-POCO entities that use EdmEntityTypeAttribute.</value>
  </data>
  <data name="DbPropertyValues_AttemptToSetValuesFromWrongType" xml:space="preserve">
    <value>Cannot copy from property values for object of type '{0}' into property values for object of type '{1}'.</value>
  </data>
  <data name="DbEntityEntry_NotSupportedForDetached" xml:space="preserve">
    <value>Member '{0}' cannot be called for the entity of type '{1}' because the entity does not exist in the context. To add an entity to the context call the Add or Attach method of DbSet&lt;{1}&gt;.</value>
  </data>
  <data name="DbContext_IndependentAssociationUpdateException" xml:space="preserve">
    <value>An error occurred while saving entities that do not expose foreign key properties for their relationships. The EntityEntries property will return null because a single entity cannot be identified as the source of the exception. Handling of exceptions while saving can be made easier by exposing foreign key properties in your entity types. See the InnerException for details.</value>
  </data>
  <data name="DbContext_ConnectionFactoryReturnedNullConnection" xml:space="preserve">
    <value>The DbConnectionFactory instance returned a null connection.</value>
  </data>
  <data name="DbEntity_BadTypeForCast" xml:space="preserve">
    <value>Cannot create a {0}&lt;{1}&gt; from a non-generic {0} for objects of type '{2}'.</value>
  </data>
  <data name="DbUnexpectedValidationException_ValidationAttribute" xml:space="preserve">
    <value>An unexpected exception was thrown during validation of '{0}' when invoking {1}.IsValid. See the inner exception for details.</value>
  </data>
  <data name="DbPropertyEntry_CannotSetCurrentValue" xml:space="preserve">
    <value>Cannot set value for property '{0}' on entity of type '{1}' because the property has no set accessor.</value>
  </data>
  <data name="DbContextServices_MissingDefaultCtor" xml:space="preserve">
    <value>The context factory type '{0}' must have a public default constructor.</value>
  </data>
  <data name="DbPropertyValues_CannotSetNullValue" xml:space="preserve">
    <value>Cannot set non-nullable property '{0}' of type '{1}' to null on object of type '{2}'.</value>
  </data>
  <data name="EdmxWriter_EdmxFromModelFirstNotSupported" xml:space="preserve">
    <value>Creating a DbModelBuilder or writing the EDMX from a DbContext created using Database First or Model First is not supported. EDMX can only be obtained from a Code First DbContext created without using an existing DbCompiledModel.</value>
  </data>
  <data name="Mapping_MESTNotSupported" xml:space="preserve">
    <value>Multiple object sets per type are not supported. The object sets '{0}' and '{1}' can both contain instances of type '{2}'.</value>
  </data>
  <data name="DbContext_ConnectionStringNotFound" xml:space="preserve">
    <value>No connection string named '{0}' could be found in the application config file.</value>
  </data>
  <data name="DbPropertyValues_PropertyDoesNotExist" xml:space="preserve">
    <value>The '{0}' property does not exist or is not mapped for the type '{1}'.</value>
  </data>
  <data name="DbPropertyValues_ComplexObjectCannotBeNull" xml:space="preserve">
    <value>The value of the complex property '{0}' on entity of type '{1}' is null. Complex properties cannot be set to null and values cannot be set for null complex properties.</value>
  </data>
  <data name="DbContext_Disposed" xml:space="preserve">
    <value>The operation cannot be completed because the DbContext has been disposed.</value>
  </data>
  <data name="DbContext_ContextUsedInModelCreating" xml:space="preserve">
    <value>The context cannot be used while the model is being created.</value>
  </data>
  <data name="DbEntityEntry_WrongGenericForNavProp" xml:space="preserve">
    <value>The navigation property '{0}' on entity type '{1}' cannot be used for entities of type '{2}' because it refers to entities of type '{3}'.</value>
  </data>
  <data name="DbEntityEntry_UsedCollectionForReferenceProp" xml:space="preserve">
    <value>The property '{0}' on type '{1}' is a reference navigation property. The Reference method should be used instead of the Collection method.</value>
  </data>
  <data name="DbEntityEntry_NotANavigationProperty" xml:space="preserve">
    <value>The property '{0}' on type '{1}' is not a navigation property. The Reference and Collection methods can only be used with navigation properties. Use the Property or ComplexProperty method.</value>
  </data>
  <data name="Database_NoModelHash" xml:space="preserve">
    <value>Model compatibility cannot be checked because the DbContext instance was not created using Code First patterns. DbContext instances created from an ObjectContext or using an EDMX file cannot be checked for compatibility.</value>
  </data>
  <data name="DbPropertyValues_AttemptToSetValuesFromWrongObject" xml:space="preserve">
    <value>Cannot copy values from DbPropertyValues for type '{0}' into DbPropertyValues for type '{1}'.</value>
  </data>
  <data name="DbPropertyEntry_SettingEntityRefNotSupported" xml:space="preserve">
    <value>Cannot set value for property '{0}' on entity of type '{1}' because the property has no set accessor and is in the '{2}' state.</value>
  </data>
  <data name="DbEntityEntry_BadPropertyExpression" xml:space="preserve">
    <value>The expression passed to method {0} must represent a property defined on the type '{1}'.</value>
  </data>
  <data name="EdmxWriter_EdmxFromDbCompiledModelNotSupported" xml:space="preserve">
    <value>Creating a DbModelBuilder or writing the EDMX from a DbContext created using an existing DbCompiledModel is not supported. EDMX can only be obtained from a Code First DbContext created without using an existing DbCompiledModel.</value>
  </data>
  <data name="DatabaseInitializationStrategy_ModelMismatch" xml:space="preserve">
    <value>The model backing the '{0}' context has changed since the database was created. Either manually delete/update the database, or call Database.SetInitializer with an IDatabaseInitializer instance. For example, the DropCreateDatabaseIfModelChanges strategy will automatically delete and recreate the database, and optionally seed it with new data.</value>
  </data>
  <data name="DbPropertyValues_PropertyValueNamesAreReadonly" xml:space="preserve">
    <value>The set of property value names is read-only.</value>
  </data>
  <data name="DbSet_WrongNumberOfKeyValuesPassed" xml:space="preserve">
    <value>The number of primary key values passed must match number of primary key values defined on the entity.</value>
  </data>
  <data name="DbModelBuilder_MissingRequiredCtor" xml:space="preserve">
    <value>The context type '{0}' must have a public constructor taking an EntityConnection.</value>
  </data>
  <data name="CodeFirstCachedMetadataWorkspace_SameModelDifferentProvidersNotSupported" xml:space="preserve">
    <value>Using the same DbCompiledModel to create contexts against different types of database servers is not supported. Instead, create a separate DbCompiledModel for each type of server being used.</value>
  </data>
  <data name="DbPropertyEntry_NotSupportedForPropertiesNotInTheModel" xml:space="preserve">
    <value>Member '{0}' cannot be called for property '{1}' on entity of type '{2}' because the property is not part of the Entity Data Model.</value>
  </data>
  <data name="DbPropertyEntry_CannotMarkPropertyUnmodified" xml:space="preserve">
    <value>Setting IsModified to false for a modified property is not supported.</value>
  </data>
  <data name="DbEntityEntry_NotAScalarProperty" xml:space="preserve">
    <value>The property '{0}' on type '{1}' is not a primitive or complex property. The Property method can only be used with primitive or complex properties. Use the Reference or Collection method.</value>
  </data>
  <data name="DbSet_BadTypeForAddAttachRemove" xml:space="preserve">
    <value>Cannot call the {0} method for an entity of type '{1}' on a DbSet for entities of type '{2}'. Only entities of type '{2}' or derived from type '{2}' can be added, attached, or removed.</value>
  </data>
  <data name="DbContext_ProviderReturnedNullConnection" xml:space="preserve">
    <value>The provider factory returned a null connection.</value>
  </data>
</root>